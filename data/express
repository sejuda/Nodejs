const express = require("express");
const app = express(); // express는 함수다
const fs = require("fs");
let template = require("./lib/template.js");
const qs = require("querystring");
const sanitizeHtml = require("sanitize-html");
const bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({ extended: false })); // 바디파서 사용 사용자가 요청할 때마다 bodyParser.urlencoded~ 가 실행됨
const path = require("path");
// route, routing (갈림길에서 방향을 잡는 path 마다 경로를)
app.get("/", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var title = "Welcome";
    var description = "Hello, Node.js";
    var list = template.list(filelist);
    var html = template.HTML(
      title,
      list,
      `<h2>${title}</h2>${description}`,
      `<a href="/create">create</a>`
    );
    /* res.writeHead(200);
     res.end(html);   이 부분을 send로 한번에 할 수 있다.*/

    res.send(html);
  });
}); // get 은 첫번째 인자 경로, 두번쨰 콜백

app.get("/page/:pageId", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var filteredId = path.parse(req.params.pageId).base;
    fs.readFile(`data/${filteredId}`, "utf8", function (err, description) {
      var title = req.params.pageId;
      var sanitizedTitle = sanitizeHtml(title);
      var sanitizedDescription = sanitizeHtml(description, {
        allowedTags: ["h1"],
      });
      var list = template.list(filelist);
      var html = template.HTML(
        sanitizedTitle,
        list,
        `<h2>${sanitizedTitle}</h2>${sanitizedDescription}`,
        ` <a href="/create">create</a>
                    <a href="/update/${sanitizedTitle}">update</a>
                    <form action="/delete_process" method="post">
                      <input type="hidden" name="id" value="${sanitizedTitle}">
                      <input type="submit" value="delete">
                    </form>`
      );
      res.send(html);
    });
  });
});

app.get("/create", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var title = "WEB - create";
    var list = template.list(filelist);
    var html = template.HTML(
      title,
      list,
      `
              <form action="/create_process" method="post">
                <p><input type="text" name="title" placeholder="title"></p>
                <p>
                  <textarea name="description" placeholder="description"></textarea>
                </p>
                <p>
                  <input type="submit">
                </p>
              </form>
            `,
      ""
    );
    res.send(html);
  });
});

app.post("/create_process", (req, res) => {
  // let body = "";
  // req
  //   .on("data", (data) => {
  //     body = body + data;
  //   })
  //   .on("end", () => {
  //     /* 더이상 데이터가 없을떄 end 그러나 바디 파서로 훨씬 간단히 할 수 있다. */
  //     let post = qs.parse(body);
  //     let title = post.title;
  //     let description = post.description;
  //     fs.writeFile(`data/${title}`, description, "utf8", (err) => {
  //       res.writeHead(302, { Location: `/?id=${title}` });
  //       res.end();
  //     });
  //   });

  // ! bodyParser 장착! body 로 접근가능하게 만들어줌
  let post = req.body;
  let title = post.title;
  let description = post.description;
  fs.writeFile(`data/${title}`, description, "utf8", (err) => {
    res.writeHead(302, { Location: `/?id=${title}` });
    res.end();
  });
});

app.get("/update/:pageId", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var filteredId = path.parse(req.params.pageId).base;
    fs.readFile(`data/${filteredId}`, "utf8", function (err, description) {
      var title = req.params.pageId;
      var list = template.list(filelist);
      var html = template.HTML(
        title,
        list,
        `
                <form action="/update_process" method="post">
                  <input type="hidden" name="id" value="${title}">
                  <p><input type="text" name="title" placeholder="title" value="${title}"></p>
                  <p>
                    <textarea name="description" placeholder="description">${description}</textarea>
                  </p>
                  <p>
                    <input type="submit">
                  </p>
                </form>
                `,
        `<a href="/create">create</a> <a href="/update?id=${title}">update</a>`
      );
      res.send(html);
    });
  });
});

app.post("/update_process", (req, res) => {
  var post = req.body;

  var id = post.id;
  var title = post.title;
  var description = post.description;
  fs.rename(`data/${id}`, `data/${title}`, function (error) {
    fs.writeFile(`data/${title}`, description, "utf8", function (err) {
      // res.writeHead(302, { Location: `/?id=${title}` });
      // res.end();

      res.redirect(`/page/${title}`); /* `/?id=${title}` 이경로도됨 */
    });
  });
});

app.post("/delete_process", (req, res) => {
  var post = req.body;
  var id = post.id;
  var filteredId = path.parse(id).base;
  fs.unlink(`data/${filteredId}`, function (error) {
    // res.writeHead(302, { Location: `/` });
    // res.end();  <-- 이게 원래 리다이렉트 코드
    res.redirect("/"); /*  < -- '/' 경로로 리다이렉트 */
  });
});

app.listen(3000, () => console.log("Example app listening on port 3000!"));
// 리슨이 실행될때 3000포트에 리슨이 가고 코드가 실행된다 (서버단에서 콘솔확인)

// var http = require('http');
// var fs = require('fs');
// var url = require('url');
// var qs = require('querystring');
// var template = require('./lib/template.js');
// var path = require('path');
// var sanitizeHtml = require('sanitize-html');

// var app = http.createServer(function(request,response){
//     var _url = request.url;
//     var queryData = url.parse(_url, true).query;
//     var pathname = url.parse(_url, true).pathname;
//     if(pathname === '/'){
//
//
//     } else if(pathname === '/create'){
//
//     } else if(pathname === '/create_process'){
//
//     } else if(pathname === '/update'){
//
//     } else if(pathname === '/update_process'){
//
//     } else if(pathname === '/delete_process'){
//
//     } else {
//       response.writeHead(404);
//       response.end('Not found');
//     }
// });
// app.listen(3000);
const express = require("express");
const app = express(); // express는 함수다
const fs = require("fs");
let template = require("./lib/template.js");
const qs = require("querystring");
const sanitizeHtml = require("sanitize-html");
const bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({ extended: false })); // 바디파서 사용 사용자가 요청할 때마다 bodyParser.urlencoded~ 가 실행됨
const path = require("path");
// route, routing (갈림길에서 방향을 잡는 path 마다 경로를)
app.get("/", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var title = "Welcome";
    var description = "Hello, Node.js";
    var list = template.list(filelist);
    var html = template.HTML(
      title,
      list,
      `<h2>${title}</h2>${description}`,
      `<a href="/create">create</a>`
    );
    /* res.writeHead(200);
     res.end(html);   이 부분을 send로 한번에 할 수 있다.*/

    res.send(html);
  });
}); // get 은 첫번째 인자 경로, 두번쨰 콜백

app.get("/page/:pageId", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var filteredId = path.parse(req.params.pageId).base;
    fs.readFile(`data/${filteredId}`, "utf8", function (err, description) {
      var title = req.params.pageId;
      var sanitizedTitle = sanitizeHtml(title);
      var sanitizedDescription = sanitizeHtml(description, {
        allowedTags: ["h1"],
      });
      var list = template.list(filelist);
      var html = template.HTML(
        sanitizedTitle,
        list,
        `<h2>${sanitizedTitle}</h2>${sanitizedDescription}`,
        ` <a href="/create">create</a>
                    <a href="/update/${sanitizedTitle}">update</a>
                    <form action="/delete_process" method="post">
                      <input type="hidden" name="id" value="${sanitizedTitle}">
                      <input type="submit" value="delete">
                    </form>`
      );
      res.send(html);
    });
  });
});

app.get("/create", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var title = "WEB - create";
    var list = template.list(filelist);
    var html = template.HTML(
      title,
      list,
      `
              <form action="/create_process" method="post">
                <p><input type="text" name="title" placeholder="title"></p>
                <p>
                  <textarea name="description" placeholder="description"></textarea>
                </p>
                <p>
                  <input type="submit">
                </p>
              </form>
            `,
      ""
    );
    res.send(html);
  });
});

app.post("/create_process", (req, res) => {
  // let body = "";
  // req
  //   .on("data", (data) => {
  //     body = body + data;
  //   })
  //   .on("end", () => {
  //     /* 더이상 데이터가 없을떄 end 그러나 바디 파서로 훨씬 간단히 할 수 있다. */
  //     let post = qs.parse(body);
  //     let title = post.title;
  //     let description = post.description;
  //     fs.writeFile(`data/${title}`, description, "utf8", (err) => {
  //       res.writeHead(302, { Location: `/?id=${title}` });
  //       res.end();
  //     });
  //   });

  // ! bodyParser 장착! body 로 접근가능하게 만들어줌
  let post = req.body;
  let title = post.title;
  let description = post.description;
  fs.writeFile(`data/${title}`, description, "utf8", (err) => {
    res.writeHead(302, { Location: `/?id=${title}` });
    res.end();
  });
});

app.get("/update/:pageId", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var filteredId = path.parse(req.params.pageId).base;
    fs.readFile(`data/${filteredId}`, "utf8", function (err, description) {
      var title = req.params.pageId;
      var list = template.list(filelist);
      var html = template.HTML(
        title,
        list,
        `
                <form action="/update_process" method="post">
                  <input type="hidden" name="id" value="${title}">
                  <p><input type="text" name="title" placeholder="title" value="${title}"></p>
                  <p>
                    <textarea name="description" placeholder="description">${description}</textarea>
                  </p>
                  <p>
                    <input type="submit">
                  </p>
                </form>
                `,
        `<a href="/create">create</a> <a href="/update?id=${title}">update</a>`
      );
      res.send(html);
    });
  });
});

app.post("/update_process", (req, res) => {
  var post = req.body;

  var id = post.id;
  var title = post.title;
  var description = post.description;
  fs.rename(`data/${id}`, `data/${title}`, function (error) {
    fs.writeFile(`data/${title}`, description, "utf8", function (err) {
      // res.writeHead(302, { Location: `/?id=${title}` });
      // res.end();

      res.redirect(`/page/${title}`); /* `/?id=${title}` 이경로도됨 */
    });
  });
});

app.post("/delete_process", (req, res) => {
  var post = req.body;
  var id = post.id;
  var filteredId = path.parse(id).base;
  fs.unlink(`data/${filteredId}`, function (error) {
    // res.writeHead(302, { Location: `/` });
    // res.end();  <-- 이게 원래 리다이렉트 코드
    res.redirect("/"); /*  < -- '/' 경로로 리다이렉트 */
  });
});

app.listen(3000, () => console.log("Example app listening on port 3000!"));
// 리슨이 실행될때 3000포트에 리슨이 가고 코드가 실행된다 (서버단에서 콘솔확인)

// var http = require('http');
// var fs = require('fs');
// var url = require('url');
// var qs = require('querystring');
// var template = require('./lib/template.js');
// var path = require('path');
// var sanitizeHtml = require('sanitize-html');

// var app = http.createServer(function(request,response){
//     var _url = request.url;
//     var queryData = url.parse(_url, true).query;
//     var pathname = url.parse(_url, true).pathname;
//     if(pathname === '/'){
//
//
//     } else if(pathname === '/create'){
//
//     } else if(pathname === '/create_process'){
//
//     } else if(pathname === '/update'){
//
//     } else if(pathname === '/update_process'){
//
//     } else if(pathname === '/delete_process'){
//
//     } else {
//       response.writeHead(404);
//       response.end('Not found');
//     }
// });
// app.listen(3000);
const express = require("express");
const app = express(); // express는 함수다
const fs = require("fs");
let template = require("./lib/template.js");
const qs = require("querystring");
const sanitizeHtml = require("sanitize-html");
const bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({ extended: false })); // 바디파서 사용 사용자가 요청할 때마다 bodyParser.urlencoded~ 가 실행됨
const path = require("path");
// route, routing (갈림길에서 방향을 잡는 path 마다 경로를)
app.get("/", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var title = "Welcome";
    var description = "Hello, Node.js";
    var list = template.list(filelist);
    var html = template.HTML(
      title,
      list,
      `<h2>${title}</h2>${description}`,
      `<a href="/create">create</a>`
    );
    /* res.writeHead(200);
     res.end(html);   이 부분을 send로 한번에 할 수 있다.*/

    res.send(html);
  });
}); // get 은 첫번째 인자 경로, 두번쨰 콜백

app.get("/page/:pageId", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var filteredId = path.parse(req.params.pageId).base;
    fs.readFile(`data/${filteredId}`, "utf8", function (err, description) {
      var title = req.params.pageId;
      var sanitizedTitle = sanitizeHtml(title);
      var sanitizedDescription = sanitizeHtml(description, {
        allowedTags: ["h1"],
      });
      var list = template.list(filelist);
      var html = template.HTML(
        sanitizedTitle,
        list,
        `<h2>${sanitizedTitle}</h2>${sanitizedDescription}`,
        ` <a href="/create">create</a>
                    <a href="/update/${sanitizedTitle}">update</a>
                    <form action="/delete_process" method="post">
                      <input type="hidden" name="id" value="${sanitizedTitle}">
                      <input type="submit" value="delete">
                    </form>`
      );
      res.send(html);
    });
  });
});

app.get("/create", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var title = "WEB - create";
    var list = template.list(filelist);
    var html = template.HTML(
      title,
      list,
      `
              <form action="/create_process" method="post">
                <p><input type="text" name="title" placeholder="title"></p>
                <p>
                  <textarea name="description" placeholder="description"></textarea>
                </p>
                <p>
                  <input type="submit">
                </p>
              </form>
            `,
      ""
    );
    res.send(html);
  });
});

app.post("/create_process", (req, res) => {
  // let body = "";
  // req
  //   .on("data", (data) => {
  //     body = body + data;
  //   })
  //   .on("end", () => {
  //     /* 더이상 데이터가 없을떄 end 그러나 바디 파서로 훨씬 간단히 할 수 있다. */
  //     let post = qs.parse(body);
  //     let title = post.title;
  //     let description = post.description;
  //     fs.writeFile(`data/${title}`, description, "utf8", (err) => {
  //       res.writeHead(302, { Location: `/?id=${title}` });
  //       res.end();
  //     });
  //   });

  // ! bodyParser 장착! body 로 접근가능하게 만들어줌
  let post = req.body;
  let title = post.title;
  let description = post.description;
  fs.writeFile(`data/${title}`, description, "utf8", (err) => {
    res.writeHead(302, { Location: `/?id=${title}` });
    res.end();
  });
});

app.get("/update/:pageId", (req, res) => {
  fs.readdir("./data", function (error, filelist) {
    var filteredId = path.parse(req.params.pageId).base;
    fs.readFile(`data/${filteredId}`, "utf8", function (err, description) {
      var title = req.params.pageId;
      var list = template.list(filelist);
      var html = template.HTML(
        title,
        list,
        `
                <form action="/update_process" method="post">
                  <input type="hidden" name="id" value="${title}">
                  <p><input type="text" name="title" placeholder="title" value="${title}"></p>
                  <p>
                    <textarea name="description" placeholder="description">${description}</textarea>
                  </p>
                  <p>
                    <input type="submit">
                  </p>
                </form>
                `,
        `<a href="/create">create</a> <a href="/update?id=${title}">update</a>`
      );
      res.send(html);
    });
  });
});

app.post("/update_process", (req, res) => {
  var post = req.body;

  var id = post.id;
  var title = post.title;
  var description = post.description;
  fs.rename(`data/${id}`, `data/${title}`, function (error) {
    fs.writeFile(`data/${title}`, description, "utf8", function (err) {
      // res.writeHead(302, { Location: `/?id=${title}` });
      // res.end();

      res.redirect(`/page/${title}`); /* `/?id=${title}` 이경로도됨 */
    });
  });
});

app.post("/delete_process", (req, res) => {
  var post = req.body;
  var id = post.id;
  var filteredId = path.parse(id).base;
  fs.unlink(`data/${filteredId}`, function (error) {
    // res.writeHead(302, { Location: `/` });
    // res.end();  <-- 이게 원래 리다이렉트 코드
    res.redirect("/"); /*  < -- '/' 경로로 리다이렉트 */
  });
});

app.listen(3000, () => console.log("Example app listening on port 3000!"));
// 리슨이 실행될때 3000포트에 리슨이 가고 코드가 실행된다 (서버단에서 콘솔확인)

// var http = require('http');
// var fs = require('fs');
// var url = require('url');
// var qs = require('querystring');
// var template = require('./lib/template.js');
// var path = require('path');
// var sanitizeHtml = require('sanitize-html');

// var app = http.createServer(function(request,response){
//     var _url = request.url;
//     var queryData = url.parse(_url, true).query;
//     var pathname = url.parse(_url, true).pathname;
//     if(pathname === '/'){
//
//
//     } else if(pathname === '/create'){
//
//     } else if(pathname === '/create_process'){
//
//     } else if(pathname === '/update'){
//
//     } else if(pathname === '/update_process'){
//
//     } else if(pathname === '/delete_process'){
//
//     } else {
//       response.writeHead(404);
//       response.end('Not found');
//     }
// });
// app.listen(3000);
